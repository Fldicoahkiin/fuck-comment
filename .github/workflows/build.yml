name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        include:
          - goos: windows
            goarch: 386
          - goos: linux
            goarch: arm
          - goos: linux
            goarch: 386
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ "$VERSION" == "refs/heads/"* ]]; then
          VERSION="dev-${GITHUB_SHA::8}"
        fi
        
        BUILD_TIME=$(date -u +%Y-%m-%d_%H:%M:%S)
        GIT_COMMIT=${GITHUB_SHA::8}
        
        LDFLAGS="-ldflags=-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT}"
        
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="fuck-comment-${GOOS}-${GOARCH}.exe"
        else
          BINARY_NAME="fuck-comment-${GOOS}-${GOARCH}"
        fi
        
        go build $LDFLAGS -o $BINARY_NAME .
        
        # 创建压缩包
        if [ "$GOOS" = "windows" ]; then
          zip "${BINARY_NAME%.exe}.zip" $BINARY_NAME
        else
          tar -czf "${BINARY_NAME}.tar.gz" $BINARY_NAME
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fuck-comment-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          fuck-comment-*
          *.zip
          *.tar.gz

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/fuck-comment-*
          **/*.zip
          **/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

