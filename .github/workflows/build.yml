name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        include:
          - goos: windows
            goarch: 386
          - goos: linux
            goarch: arm
          - goos: linux
            goarch: 386
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ "$VERSION" == "refs/heads/"* ]]; then
          VERSION="dev-${GITHUB_SHA::8}"
        fi
        
        BUILD_TIME=$(date -u +%Y-%m-%d_%H:%M:%S)
        GIT_COMMIT=${GITHUB_SHA::8}
        
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="fuck-comment-${GOOS}-${GOARCH}.exe"
        else
          BINARY_NAME="fuck-comment-${GOOS}-${GOARCH}"
        fi
        
        go build -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT}" -o $BINARY_NAME .
        
        # 创建压缩包
        if [ "$GOOS" = "windows" ]; then
          zip "${BINARY_NAME%.exe}.zip" $BINARY_NAME
        else
          tar -czf "${BINARY_NAME}.tar.gz" $BINARY_NAME
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fuck-comment-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          fuck-comment-*
          *.zip
          *.tar.gz

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate checksums
      run: |
        find . -name "fuck-comment-*" -type f | while read file; do
          echo "$(sha256sum "$file" | cut -d' ' -f1)  $(basename "$file")" >> checksums.txt
        done
        cat checksums.txt
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          **/fuck-comment-*
          **/*.zip
          **/*.tar.gz
          checksums.txt
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          # 🚀 fuck-comment ${{ github.ref_name }}
          
          **一键删注释** - 高效的跨平台代码注释删除工具
          
          ## 📦 下载文件
          
          | 平台 | 架构 | 文件名 |
          |------|------|--------|
          | **Windows** | x64 | `fuck-comment-windows-amd64.exe` |
          | Windows | x86 | `fuck-comment-windows-386.exe` |
          | Windows | ARM64 | `fuck-comment-windows-arm64.exe` |
          | **macOS** | Intel | `fuck-comment-darwin-amd64` |
          | **macOS** | Apple Silicon | `fuck-comment-darwin-arm64` |
          | **Linux** | x64 | `fuck-comment-linux-amd64` |
          | Linux | x86 | `fuck-comment-linux-386` |
          | Linux | ARM64 | `fuck-comment-linux-arm64` |
          | Linux | ARM | `fuck-comment-linux-arm` |
          
          ## 🔍 文件校验
          
          SHA256校验和已包含在 `checksums.txt` 文件中。下载后请验证文件完整性：
          
          ```bash
          # macOS/Linux
          sha256sum -c checksums.txt
          
          # Windows (PowerShell)
          Get-FileHash *.exe -Algorithm SHA256
          ```
          
          ## 🚀 快速安装
          
          ```bash
          # 自动检测平台并下载
          curl -L -o fuck-comment https://github.com/Fldicoahkiin/fuck-comment/releases/latest/download/fuck-comment-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m | sed 's/x86_64/amd64/')
          chmod +x fuck-comment
          ```
          
          ## 📖 使用方法
          
          ```bash
          # 删除当前目录所有支持文件的注释
          ./fuck-comment
          
          # 显示详细处理信息
          ./fuck-comment -v
          
          # 删除指定文件的注释
          ./fuck-comment -f main.go
          ```
          
          **完整文档**: https://github.com/Fldicoahkiin/fuck-comment#readme
        token: ${{ secrets.GITHUB_TOKEN }}

